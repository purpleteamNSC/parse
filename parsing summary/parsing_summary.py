# Run in terminal 'python parsing_summary.py -h' for help.

import os
import sys
import subprocess
import argparse
from argparse import RawTextHelpFormatter

import xml.etree
from xml.etree import ElementTree

#Create help function to be used as a help function for the script when run as 'python3 script.py -h'
parser = argparse.ArgumentParser(description=
("OBJECTIVITY: To print out the comprehensive parsing summary.\n"
"PRE-REQUISITE: You must have an output file with you. (Generated by running new_manual_run.sh against your rules and logs file.)\n"
"INSTRUCTIONS TO USE: Run the script with python3 with your rule file as FIRST ARGUMENT and your output file as your SECOND ARGUMENT.\n"
"\t\t     For reference: 'python3 parsing_summary.py rule.xml output.txt'\n"
"RESULT: Prints out which rule hit exactly how many logs." 
), 
formatter_class=RawTextHelpFormatter
)
parser.add_argument("[path/to/xml/file]") 
parser.add_argument("[path/to/output/file]") 
args = parser.parse_args()

try:
	rule_file = sys.argv[1]
	if(os.stat(rule_file).st_size == 0):
		print('Empty rules file provided. Aborting...')
		exit (1)
except IndexError:
	print ("Rules/Output file missing. Please provide rules file as 1st argument and output file as 2nd argument.")
	exit (1)

try:
	output_file = sys.argv[2]
	if(os.stat(output_file).st_size == 0):
		print('Empty output file provided. Aborting...')
		exit (1)
except IndexError:
	print ("Rules/Output file missing. Please provide rules file as 1st argument and output file as 2nd argument.")
	exit (1)

try:
	with open(rule_file,'rt') as f:
	    tree = ElementTree.parse(f)
except xml.etree.ElementTree.ParseError:
	print('Faulty rules file. Aborting...')
	exit (1)

count = 0
for rule in tree.iter('rule'):
	ruleid = rule.attrib['id']
	cmd = "grep -w \""+ ruleid + "\" "+output_file+" | wc -l"
	p = subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE)
	p.wait()
	(output,err) = p.communicate()
	count=count+int(output)
	
	if(err is None):
		print ("Rule {} hit {} logs.".format(ruleid,int(output)))
		
print("\nTotal logs hit: {}\n".format(count))


